#!/usr/bin/env python3

import os
import argparse
import re
import subprocess

# Path to the generated games folder
gen_path = "files/generated/games"


def provision_game(line, user_array, key):
    """Given a line from games.txt, provision a game and write to the
    appropriate directory

    line: string from games.txt to create a game for
    """
    # Regular expression to parse out the necessary parts of the line in the
    # games.txt file. The regular expression works as follows:
    # 1. Match a file name and capture it
    # 2. Skip over any whitespace
    # 3. Match the game name and capture it
    # 4. Skip over whitespace
    # 5. Match the group (major.minor)
    # TODO: Evaluate this as a possible entry point

    reg = r'^\s*([\w\/\-.\_]+)\s+([\w\-.\_]+)\s+(\d+\.\d+|\d+)((?:\s+\w+)+)'
    m = re.match(reg, line)
    if not m:
        return

    # Path to the game
    g_path = m.group(1)
    # Name of the game
    name = m.group(2)
    # Game version
    version = m.group(3)
    # List of users (strings) that are allowed to play this game
    users = m.group(4).split()

    # Open the path to the games in binary mode
    try:
        f = open(g_path, "rb")
    except Exception as e:
        print("Error, could not open game: %s" % (e))
        exit(1)

    # The output of the game into the file should be:
    # gamename-vmajor.minor
    f_out_name = name + "-v" + version
    # Open the output file in binary mode
    try:
        f_out = open(os.path.join(gen_path, f_out_name), "wb")
    except Exception as e:
        print("Error, could not open game output file: %s" % (e))
        f.close()
        exit(1)

    # Write the game header to the top of the file
    # The game header takes the form of the version, name, and user information
    # one separate lines, prefaced with the information for what the data is
    # (version, name, users), separated by a colon. User information is space
    # separated
    # For example:
    # version:1.0
    # name:2048
    # users:drew ben lou hunter 

    header = bytes("version:%s\n" % (version), "utf-8")
    header += bytes("name:%s\n" % (name), "utf-8")
    for user in users:
        header = bytes("users:%s\n" % (user), "utf-8")
    # f_out.write(bytes("version:%s\n" % (version), "utf-8"))
    # f_out.write(bytes("name:%s\n" % (name), "utf-8"))
    # f_out.write(bytes("users:%s\n" % (" ".join(users)), "utf-8"))

    # Read in the binary source
    g_src = f.read()
    # Write the binary source
    while g_src:
        f_out.write(g_src)
        g_src = f.read()

    # Close the files
    f_out.close()
    f.close()

    print("    %s -> %s" % (g_path, os.path.join(gen_path, f_out_name)))

def load_factory_secrets(f):
    lines = [line.rstrip('\n') for line in f]
    key = lines[-1:]
    print(key)
    print(lines[:-1])
    array = []
    for user in lines:
        array.append(user.split(' '))
    print(array)
    return array, key

def main():
    # argument parsing
    parser = argparse.ArgumentParser()
    parser.add_argument('factory_secrets',
                        help=("This file is the FactorySecrets.txt file "
                              "generated by provisionSystem.py"))
    parser.add_argument('games',
                        help=("A text file containing game information in a "
                              "MITRE defined format."))
    args = parser.parse_args()

    # open factory secrets
    try:
        f_factory_secrets = open(args.factory_secrets, "r")
    except Exception as e:
        print("Couldn't open file %s: %s" % (args.factory_secrets), (e))
        exit(2)

    # Open the games file
    try:
        f_games = open(args.games, "r")
    except Exception as e:
        print("Couldn't open file %s" % (args.games))
        f_factory_secrets.close() # Doesn't close otherwise?
        exit(2)
    
    user_array, key = load_factory_secrets(f_factory_secrets)

    subprocess.check_call("mkdir -p %s" % (gen_path), shell=True)

    print("Provision Games...")

    # Provision each line in the games file
    for line in f_games:
        provision_game(line, user_array, key)

    print("Done Provision Games")

    exit(0)


if __name__ == '__main__':
    main()
